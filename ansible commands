    2  ssh-keygen
    3  ssh-copy-id 172.31.18.211
    4  ssh 172.31.18.211
    5  ssh-copy-id 172.31.18.211
    7  ssh 172.31.18.211
    8  mkdir ansible
   10  cd ansible/
   11  vi myhosts
   13  ansible all -i myhosts -m ping
   15  cd
   16  cd Ansible-SAI_1992/
   17  ls
   18  git pull
   20  for adding another node (redhat)
   ssh-copy-id 172.31.21.210
   23  ssh 172.31.21.210
       git pull
   29  ansible-playbook -i myhosts myping.yml
   
To see all connected nodes information type below command in ansible master node

   ansible all -i myhosts -m setup
To install webserver on both redhat and ubuntu nodes by using single play book we use condition base :

like when: ansible_os_family == "Debian"   for ubuntu node
     when: ansible_os_family == "RedHat"   for RedHat node
To seerequired node information type below command in ansible master node

sai@ip-172-31-27-92:~/Ansible-SAI_1992$ ansible all -i myhosts -m setup -a "filter=*family*"
172.31.18.211 | SUCCESS => {
    "ansible_facts": {
        "ansible_os_family": "Debian",
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false
}
172.31.21.210 | SUCCESS => {
    "ansible_facts": {
        "ansible_os_family": "RedHat",
        "discovered_interpreter_python": "/usr/libexec/platform-python"
    },
    "changed": false


Templates & Handlers:
i want to dsiplay apache2 webpage replaced with my own content
for this before writing playbook we need to create index.j2 file with which you want from node and your matter as follows:

#<h1> This is SAI & HARISH </h1>
#<h1> Displaying i.p address of node: "{{ansible_all_ipv4_addresses}}" </h1>
#<h1> Displaying Family of particular node: "{{ansible_os_family}}"</h1>

after writing index.j2 file you will go to template.yml playbook

DYNAMIC INVENTORY:

1. create AWS admin user
   create IAM in services and create user and select check boxes and permssion and download .csv file
2. under Master >>user sai
   on Ubuntu 
   sudo apt-get install python-pip
   sudo pip install boto
3. on user sai and root
   create vi.boto (file)
   [Credentials]
   aws_access_key_id=foo 
   aws_secret_access_key= ---  (Copy paste IAM accesskey and secret key)
4.Create a AMI by using our required existing ubuntu node or redhat node
   go to ansible node actions>>create AMI and name as ubuntunodeAMI and create
   Then go to ec2 ami and it will run
     after creating AMI all data from the node will be stored
5. Create instances by using playbook (creatinginstances.yml)

for Dyanamic concepts:
search in google ec2.py, ec2.ini copy paste the data, 
 under user create two file vi ec2.py, ec2.ini and paste
 change permissions of bothfiles (chmod 755 ec2.ini, ec2.py)
to set the path for ec2.ini and ec2.py file  (under user level)
   >>>export EC2_INI_PATH=/home/sai/ec2.ini
   >>> export ANSIBLE_HOSTS=/home/sai/ec2.py

To check list of all nodes type command :
        ./ec2.py --list
    we will playbook according to the tag list.
after writing play book the new created nodes to chech pingable or not
 ansible -i ec2.py -u sai tag_Name_ansible_ubuntuNodes -m ping
  to execute a play book  

   ansible-playbook -i ec2.py -u sai dynamic-apache2.yml
   

   ANSIBLE-ROLES:
   To create ansible-roles we will be under master and execute below command

   ansible-galaxy init tomrole (we can any name instaed of tomrole ex.saitom7role)
after installation type

tree saitom7role
 you can see tree structure format of saitom7role.

 1) after creation of role we have to create on playbookto call our required role ex:saitom7role calling as sai-tom7-role.yml.
 in order to execute in ansible playbook. 

 2) After editing file in  sudo nano /etc/default/tomcat7.
 To get the file content from server location to local system. follow belo:
 chang permissions mode to the path 
 chmod 755 /etc/default/tomcat7
we need to copy the conten from file to desktop via
scp or winscp command 
go to desktop git bash and 
scp -i .pemfile name ubuntu@public.I.P or public DNS:source destnation
Ex:scp -i harish.pem ubuntu@172.31.16.201:/etc/default/tomcat7 .

you will file into your desktop open with notepad++ and paste in template, config.j3 file

3) restart the tomcat7
   for this go to Handlersa 
      - name: restarttomcat7
        service:
          name: tomcat7
          state: started

    and notify in task main.yml

4) Installing additional packages

 - name: installing additinla packages
    apt:
      name: "{{item}}"
      state: present
    loop:
      - tomcat7-docs
      - tomcat7-admin
      - tomcat7-examples

5) copying user.xml file from server to local location by chmod command and copy to local and edited in template files

 - name: copying tomcat-user.xml file content into tomcat7 server
    template:
      src: templates/tomuser.j2
      dest: /etc/tomcat7/tomcat-users.xml
    notify: restarttomcat7

we can use upto tomcat level but not deployed
6) for deploying application .war file through s3 or jfrog follows:
for TOMACT7:
- name: deploying java application into tomcat7 through s3
    get_url:
      url: https://saiwar.s3.amazonaws.com/saiLogin-1.0.war
      dest: /var/lib/tomcat7/webapps/
      force_basic_auth: yes
    notify: restarttomcat7 

7) Now go to main playbook i.e sai-tom7-role.yml

---
- hosts: ubuntuserver
  become: yes
  roles:
  - {role: saitom7role, when: ansible_os_family="Debian"} 

path for tomcat7 .war file deploying path on Ubuntu:--  /var/lib/tomcat7/webapps
path for tomcat7 .war file deploying path on RedHat:--  /usr/share/tomcat/webapps
